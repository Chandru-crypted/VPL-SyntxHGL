%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
name: vpl
file_extensions: [vpl, VPL, inc, INC]
scope: scope.vpl

# This will assign the string.quoted.double.vpl scope to all text while the string context is on the stack.
variables:
  # number digits
  bin_digit: '[01]'
  oct_digit: '[0-7]'
  dec_digit: '\d'
  hex_digit: '\h'

  dec_digits: '{{dec_digit}}+'

  # number exponents
  dec_exponent: '(?:[eE][-+]?{{dec_digit}}*)'
  hex_exponent: '(?:[pP][-+]?{{dec_digit}}*)'

  # number suffixes
  bin_suffix: '[2-9a-zA-Z_][[:alnum:]_]*'
  oct_suffix: '[8-9g-zG-Z_][[:alnum:]_]*'
  dec_suffix: '[a-zA-Z_][[:alnum:]_]*'
  hex_suffix: '[g-zG-Z_][[:alnum:]_]*'
  double_suffix: '[fFlL]'
  float_suffix: '[fF]'
  integer_suffix: '[lL]{1,2}[uU]?|[uU][lL]{0,2}'

  identifier: \b[[:alpha:]_][[:alnum:]_]*\b # upper and lowercase
  macro_identifier: \b[[:upper:]_][[:upper:][:digit:]_]{2,}\b # only uppercase, at least 3 chars
  control_keywords: '\b((?i)break(?-i))\b|\b((?i)case(?-i))\b|\b((?i)continue(?-i))\b|\b((?i)else(?-i))\b|\b((?i)for(?-i))\b||\b((?i)end_for(?-i))\b|\b((?i)if(?-i))\b||\b((?i)end_if(?-i))\b|\b((?i)return(?-i))\b|\b((?i)while(?-i))\b|\b((?i)end_while(?-i))\b|\b((?i)then(?-i))\b'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|extern|register|{{declspec}}'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_func_keywords: 'if|for|switch|while|decltype|sizeof|__declspec|__attribute__'

contexts:
  main:
    - include: strings
    - include: comments    
    - include : keywords

  strings:
    - match: '(L|u8|u|U)?(")'
      captures:
        1: storage.type.string.vpl
        2: punctuation.definition.string.begin.vpl
      push:
        - meta_scope: string.quoted.double.vpl
        - match: '"'
          scope: punctuation.definition.string.end.vpl
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(L|u8|u|U)?(')"
      captures:
        1: storage.type.string.vpl
        2: punctuation.definition.string.begin.vpl
      push:
        - meta_scope: string.quoted.single.vpl
        - match: "'"
          scope: punctuation.definition.string.end.vpl
          pop: true
        - include: string_escaped_char


  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.vpl
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.vpl
    - match: \\.
      scope: invalid.illegal.unknown-escape.vpl

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.vpl

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.vpl
      captures:
        1: meta.toc-list.banner.block.vpl
    - match: /\*
      scope: punctuation.definition.comment.vpl
      push:
        - meta_scope: comment.block.vpl
        - match: \*/
          scope: punctuation.definition.comment.vpl
          pop: true
        - match: ^\s*(\*)(?!/)
          captures:
            1: punctuation.definition.comment.vpl
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.vpl
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.vpl
      captures:
        1: meta.toc-list.banner.line.vpl
    - match: //
      scope: punctuation.definition.comment.vpl
      push:
        - meta_scope: comment.line.double-slash.vpl
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.vpl
        - match: \n
          pop: true

  keywords:
    - match: \b((?i)break(?-i))\b
      scope: keyword.control.flow.break.vpl
    - match: \b((?i)continue(?-i))\b
      scope: keyword.control.flow.continue.vpl
    - match: \b((?i)return(?-i))\b
      scope: keyword.control.flow.return.vpl
    - match: \b({{control_keywords}})\b
      scope: keyword.control.vpl
    - match: \b((?i)sizeof(?-i))\b
      scope: keyword.operator.word.vpl
